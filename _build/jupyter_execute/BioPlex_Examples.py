#!/usr/bin/env python
# coding: utf-8

# In[1]:


from IPython.core.display import display, HTML
display(HTML("<style>.container { width:100% !important; }</style>"))


# ## Examples for how to use functions from BioPlexPy

# Import functions from module

# In[2]:


# data import funcs
from BioPlexPy.data_import_funcs import getBioPlex
from BioPlexPy.data_import_funcs import getGSE122425
from BioPlexPy.data_import_funcs import getCorum

# analysis funcs
from BioPlexPy.analysis_funcs import bioplex2graph
from BioPlexPy.analysis_funcs import get_PPI_network_edges_for_complex
from BioPlexPy.analysis_funcs import get_prop_edges_in_complex_identfied
from BioPlexPy.analysis_funcs import permutation_test_for_CORUM_complex

# visualization funcs
from BioPlexPy.visualization_funcs import display_PPI_network_for_complex


# # [1] *getBioPlex* - function to retrieve interactions data

# ### Description

# Load BioPlex interactions data - This function loads BioPlex PPI data for cell lines HEK293T and HCT116, note we only have version 1.0 for HCT116 cells.

# ### Parameters

# 1) cell_line : str
#  - Takes input: '293T' or 'HCT116'
#  
#  
# 2) version : str
#  - Takes input: '3.0', '1.0' or '2.0'

# ### Returns

# Pandas DataFrame
#  - A dataframe with each row corresponding to a PPI interaction.

# <ins>Column Descriptions</ins>
# 
# GeneA: Entrez Gene ID for the first interacting protein
# 
# GeneB: Entrez Gene ID for the second interacting protein
# 
# UniprotA: Uniprot ID for the first interacting protein
# 
# UniprotB: Uniprot ID for the second interacting protein
# 
# SymbolA: Symbol for the first interacting protein
# 
# SymbolB: Symbol for the second interacting protein
# 
# p(Wrong ID): Probability of wrong protein ID (CompPASS-Plus)
# 
# p(NotInteractor): Probability of nonspecific background (CompPASS-Plus)
# 
# p(Interactor): Probability of high-confidence interaction (CompPASS-Plus)

# ### Example 1

# Load DataFrames that contain protein-protein interactions from **HEK293T** & **HCT116** cell lines
# 
# [Huttlin, E. L., Bruckner, R. J., Navarrete-Perea, J., Cannon, J. R., Baltier, K., Gebreab, F., ... & Gygi, S. P. (2021). Dual proteome-scale networks reveal cell-specific remodeling of the human interactome. Cell, 184(11), 3022-3040.](https://www.sciencedirect.com/science/article/abs/pii/S0092867421004463)

# In[3]:


bp_293t = getBioPlex('293T', '3.0')


# In[4]:


bp_293t.head()


# ### Example 2

# In[5]:


bp_hct116 = getBioPlex('HCT116', '1.0')


# In[6]:


bp_hct116.head()


# # [2] *getGSE122425* - function to retrieve HEK293 RNAseq expression data

# ### Description

# Retrieve HEK293 RNAseq expression data.

# ### Returns

# adata : AnnData object
#  - SummarizedExperiment of HEK293 raw count with an added layer storing rpkm.

# ### Example 1

# Load AnnData structure that has mRNA profiles (RNA-seq) of wild type (WT) and NSUN2-/- HEK293 cells that were generated by deep sequencing, in triplicate.
# 
# [Effects of NSUN2 deficiency on the mRNA 5-methylcytosine modification and gene expression profile in HEK293 cells (RNA-Seq)](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE122425)

# In[7]:


HEK293_adata = getGSE122425()


# In[8]:


HEK293_adata


# List rows (observations) that specify **genes**

# In[9]:


print(HEK293_adata.obs_names[:10].tolist())


# List columns (variables) that specify whether at **knock-out or wildtype replicates**

# In[10]:


print(HEK293_adata.var_names.tolist())


# Call matrix with **raw counts**

# In[11]:


print(HEK293_adata.X)


# Call matrix with **rpkm**

# In[12]:


print(HEK293_adata.layers["rpkm"])


# # [3] *bioplex2graph* - function to convert BioPlex PPIs into a graph data structure

# ### Description

# Convert BioPlex PPIs into a graph - This function converts representation of BioPlex PPIs into a graph data structure representation of BioPlex PPIs in a NetworkX object from NetworkX.

# ### Parameters

# 1) DataFrame of PPIs : Pandas DataFrame

# ### Returns

# NetworkX graph
#  - A NetworkX graph with Nodes = Uniprot Gene Symbols and Edges = interactions.

# ### Example 1

# 1) Obtain the latest version of the 293T PPI network

# In[13]:


bp_293t_df = getBioPlex('293T', '3.0')


# In[14]:


bp_293t_df.head()


# 2) Turn the data into a graph with NetworkX

# In[15]:


bp_293t_G = bioplex2graph(bp_293t_df)


# ### Example 2 - Examine properties of Network

# Analyze nodes in PPI network

# In[16]:


len(bp_293t_G.nodes()) # number of nodes


# In[17]:


list(bp_293t_G.nodes())[0:5]


# Call nodes and attributes stored for each node

# In[18]:


bp_293t_G.nodes['P00813']


# In[19]:


bp_293t_G.nodes['Q8N7W2']


# Analyze edges in PPI network

# In[20]:


len(bp_293t_G.edges()) # number of edges


# In[21]:


list(bp_293t_G.edges())[0:5]


# Call edges and attributes stored for each edge (PPI)

# In[22]:


bp_293t_G.get_edge_data('P00813', 'A5A3E0')


# ### Example 3 - Run network algorithms using NetworkX

# In[23]:


import networkx as nx
import pandas as pd


# Run [pagerank algorithm](https://networkx.guide/algorithms/link-analysis/pagerank/) on network and rank nodes

# In[24]:


bp_293t_G_pr = nx.pagerank(bp_293t_G, alpha=0.8)
bp_293t_G_pr = pd.Series(bp_293t_G_pr)
bp_293t_G_pr.sort_values(ascending = False, inplace = True)


# In[25]:


bp_293t_G_pr.head(n=5)


# # [4] *getCorum* - function to retrieve CORUM complex data

# ### Description

# Functionality for retrieving the CORUM protein complex data.

# ### Parameters

# 1) complex_set : str
#  - Takes input 'all' (default), 'core' or 'splice'
#  
#  
# 2) organism : str
#  - Takes input 'Bovine', 'Dog', 'Hamster', 'Human' (default), 'MINK', 'Mammalia', 'Mouse', 'Pig', 'Rabbit' or 'Rat'

# ### Returns

# Pandas DataFrame
#  - A dataframe with each row corresponding to a CORUM complex.

# ### Example 1

# Retrieve **all** CORUM complexes for **Human** 

# In[26]:


all_Human_CORUM_df = getCorum()


# In[27]:


all_Human_CORUM_df.head(n=3)


# In[28]:


all_Human_CORUM_df.shape


# ### Example 2

# Retrieve the **core** CORUM complexes for **Mouse** 

# In[29]:


core_Mouse_CORUM_df = getCorum('core','Mouse')


# In[30]:


core_Mouse_CORUM_df.head(n=3)


# In[31]:


core_Mouse_CORUM_df.shape


# # [5] *display_PPI_network_for_complex* - function to visualize PPI data for a given complex from CORUM

# ### Description

# Display network of BioPlex PPIs for a CORUM complex - This function displays a complete network in which nodes represent the proteins in a specified CORUM complex and edges represent BioPlex PPIs using NetworkX. Edges detected through AP-MS are colored darker.
# 
# See [Huttlin, E. L., Bruckner, R. J., Navarrete-Perea, J., Cannon, J. R., Baltier, K., Gebreab, F., ... & Gygi, S. P. (2021). Dual proteome-scale networks reveal cell-specific remodeling of the human interactome. Cell, 184(11), 3022-3040.](https://www.sciencedirect.com/science/article/abs/pii/S0092867421004463) for reference.

# ### Parameters

# 1) ax object to draw on: Matplotlib Axes
# 
# 
# 2) DataFrame of PPIs : Pandas DataFrame
#     
# 
# 3) DataFrame of CORUM complexes : Pandas DataFrame
# 
# 
# 4) Name of Corum Complex: str
# 
# 
# 5) Size of Nodes in Network: int
# 
# 
# 6) Width of Edges in Network: float
# 
#     
# 7) **optional** Color of Nodes targeted as baits: str
# 
# 
# 8) **optional** Color of Nodes detected as preys only: str
# 
# 
# 9) **optional** Color of Edges observed via AP-MS from PPI data: str
# 
# 
# 10) **optional** NetworkX Position of Nodes: dict

# ### Returns

# Node Positions
#  - Dictionary of Node Positions in NetworkX layout.

# ### Example 1

# In[ ]:


import matplotlib.pyplot as plt


# 1) Obtain the latest version of the **293T** PPI network

# In[32]:


bp_PPI_df = getBioPlex('293T', '3.0')


# 2) Obtain **core** CORUM complexes for **Human**

# In[33]:


Corum_DF = getCorum('core', 'Human')


# 3) Visualize network for specified protein complex using PPI data (**ING2 complex** ID: 2851)

# **ING2** complex from HEK293T cell line PPI data version 3.0

# In[34]:


Corum_DF[Corum_DF.ComplexName == 'ING2 complex']


# In[38]:


fig, ax = plt.subplots()

bp_PPI_df = getBioPlex('293T', '3.0')
Corum_DF = getCorum('core', 'Human')
ING2_node_layout = display_PPI_network_for_complex(ax, bp_PPI_df, Corum_DF, 2851, 2300, 3.5)

fig = plt.gcf()
fig.set_size_inches(7.5, 7.5)
fig.tight_layout()

# save figure as PNG
fig_out_path = '/n/shared_db/ccb/bioplex/BioPlexPy_testing/figures/network_293T_3.0_ING2-complex.png'
plt.savefig(fig_out_path, bbox_inches='tight', dpi = 300 , transparent = True)
plt.show()


# ### Example 2

# **Arp2/3** complex from HEK293T cell line PPI data version 3.0

# In[39]:


Corum_DF[Corum_DF.ComplexName == 'Arp2/3 protein complex']


# In[40]:


fig, ax = plt.subplots()

bp_PPI_df = getBioPlex('293T', '3.0')
Corum_DF = getCorum('core', 'Human')
Arp23_node_layout = display_PPI_network_for_complex(ax, bp_PPI_df, Corum_DF, 27, 2300, 3.5)

fig = plt.gcf()
fig.set_size_inches(7.5, 7.5)
fig.tight_layout()

# save figure as PNG
fig_out_path = '/n/shared_db/ccb/bioplex/BioPlexPy_testing/figures/network_293T_3.0_Arp2-3-complex.png'
plt.savefig(fig_out_path, bbox_inches='tight', dpi = 300 , transparent = True)
plt.show()


# ### Example 3

# In[43]:


from matplotlib import gridspec


# **COP9 Signalsome** complex from *HCT116 cell line PPI data version 1.0* & *HEK293T cell line PPI data version 3.0*

# In[41]:


Corum_DF[Corum_DF.ComplexName == 'COP9 signalosome complex']


# In[44]:


fig = plt.figure(constrained_layout=True)
spec = gridspec.GridSpec(ncols=2, nrows=1, figure=fig) # define 2 columns since we'll have two networks
spec.update(wspace=0.025) # set the spacing between axes.

# pull CORUM complexes we're interested in
Corum_DF = getCorum('core', 'Human')

# HCT116 1.0
ax_HCT116_v1 = fig.add_subplot(spec[0]) # create axes object for HCT116 v1 network
bp_HCT116_v1_PPI_df = getBioPlex('HCT116', '1.0') # load PPI data for HCT116 v1
COP9_node_layout = display_PPI_network_for_complex(ax_HCT116_v1, bp_HCT116_v1_PPI_df, Corum_DF, 2174, 2300, 3.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue')

# HEK293T 3.0
ax_293T_v3 = fig.add_subplot(spec[1]) # create axes object for HEK293T v3 network
bp_293T_v3_df = getBioPlex('293T', '3.0') # load PPI data for HEK293T v3
COP9_node_layout = display_PPI_network_for_complex(ax_293T_v3, bp_293T_v3_df, Corum_DF, 2174, 2300, 3.5, node_pos=COP9_node_layout)

fig = plt.gcf()
fig.set_size_inches(15, 7.5)
fig.tight_layout()

# save figure as PNG
fig_out_path = '/n/shared_db/ccb/bioplex/BioPlexPy_testing/figures/network_HCT116_1.0_VS_293T_3.0_COP9-signalsome-complex.png'
plt.savefig(fig_out_path, bbox_inches='tight', dpi = 300 , transparent = True)
plt.show()


# ### Example 4

# **Fanconi Anemia Core** complex from *HCT116 cell line PPI data version 1.0* & *HEK293T cell line PPI data version 3.0*

# In[45]:


Corum_DF[Corum_DF.ComplexName == 'FA core complex 1 (Fanconi anemia core complex 1)']


# In[46]:


fig = plt.figure(constrained_layout=True)
spec = gridspec.GridSpec(ncols=2, nrows=1, figure=fig) # define 2 columns since we'll have two networks
spec.update(wspace=0.025) # set the spacing between axes.

# pull CORUM complexes we're interested in
Corum_DF = getCorum('core', 'Human')

# HCT116 1.0
ax_HCT116_v1 = fig.add_subplot(spec[0]) # create axes object for HCT116 v1 network
bp_HCT116_v1_PPI_df = getBioPlex('HCT116', '1.0') # load PPI data for HCT116 v1
Fanconi_Anemia_node_layout = display_PPI_network_for_complex(ax_HCT116_v1, bp_HCT116_v1_PPI_df, Corum_DF, 1623, 2300, 3.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue')
ax_HCT116_v1.set_title('HCT116 v1.0', color = 'black', fontsize = 14) # set title

# HEK293T 3.0
ax_293T_v3 = fig.add_subplot(spec[1]) # create axes object for HEK293T v3 network
bp_293T_v3_df = getBioPlex('293T', '3.0') # load PPI data for HEK293T v3
Fanconi_Anemia_node_layout = display_PPI_network_for_complex(ax_293T_v3, bp_293T_v3_df, Corum_DF, 1623, 2300, 3.5, node_pos = Fanconi_Anemia_node_layout)
ax_293T_v3.set_title('293T v3.0', color = 'black', fontsize = 14) # set title

fig = plt.gcf()
fig.set_size_inches(15, 7.5)
fig.tight_layout()

# save figure as PNG
fig_out_path = '/n/shared_db/ccb/bioplex/BioPlexPy_testing/figures/network_HCT116_1.0_VS_293T_3.0_Fanconi-Anemia-core-complex.png'
plt.savefig(fig_out_path, bbox_inches='tight', dpi = 300 , transparent = True)
plt.show()


# ### Example 5 - Recreate *Figure 1* from *Cell* 2021 BioPlex 3.0 paper

# **Exosome** complex

# In[47]:


Corum_DF[Corum_DF.ComplexID == 7443]


# **BCOR** complex

# In[48]:


Corum_DF[Corum_DF.ComplexID == 1178]


# In[49]:


fig = plt.figure(constrained_layout=True)
spec = gridspec.GridSpec(ncols=4, nrows=2, figure=fig) # define 2 columns since we'll have two networks
spec.update(wspace=0.01,hspace=0.01) # set the spacing between axes.

# pull CORUM complexes we're interested in
Corum_DF = getCorum('core', 'Human')

# HEK293T 3.0 - create axes objects for HEK293T v3 network
ax_293T_v3_A = fig.add_subplot(spec[0,0])
ax_293T_v3_C = fig.add_subplot(spec[0,2])
ax_293T_v3_E = fig.add_subplot(spec[1,0])
ax_293T_v3_G = fig.add_subplot(spec[1,2])

bp_293T_v3_df = getBioPlex('293T', '3.0') # load PPI data for HEK293T v3

Fanconi_Anemia_node_layout = display_PPI_network_for_complex(ax_293T_v3_A, bp_293T_v3_df, Corum_DF, 1623, 800, 1.5, node_font_size=5.5)
Exosome_node_layout = display_PPI_network_for_complex(ax_293T_v3_C, bp_293T_v3_df, Corum_DF, 7443, 800, 1.5, node_font_size=5.5)
COP9_node_layout = display_PPI_network_for_complex(ax_293T_v3_E, bp_293T_v3_df, Corum_DF, 2174, 800, 1.5, node_font_size=5.5)
BCOR_node_layout = display_PPI_network_for_complex(ax_293T_v3_G, bp_293T_v3_df, Corum_DF, 1178, 800, 1.5, node_font_size=5.5)

# set titles
ax_293T_v3_A.set_title('Fanconi Anemia Core Complex\n293T v3.0', color = 'black', fontsize = 10)
ax_293T_v3_C.set_title('Exosome complex\n293T v3.0', color = 'black', fontsize = 10)
ax_293T_v3_E.set_title('COP9 signalosome complex\n293T v3.0', color = 'black', fontsize = 10)
ax_293T_v3_G.set_title('BCOR complex\n293T v3.0', color = 'black', fontsize = 10)

# HCT116 1.0 - create axes object for HCT116 v1 network
ax_HCT116_v1_B = fig.add_subplot(spec[0,1])
ax_HCT116_v1_D = fig.add_subplot(spec[0,3])
ax_HCT116_v1_F = fig.add_subplot(spec[1,1])
ax_HCT116_v1_H = fig.add_subplot(spec[1,3])

bp_HCT116_v1_df = getBioPlex('HCT116', '1.0') # load PPI data for HCT116 v1

Fanconi_Anemia_node_layout = display_PPI_network_for_complex(ax_HCT116_v1_B, bp_HCT116_v1_df, Corum_DF, 1623, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue', node_pos=Fanconi_Anemia_node_layout)
Exosome_node_layout = display_PPI_network_for_complex(ax_HCT116_v1_D, bp_HCT116_v1_df, Corum_DF, 7443, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue', node_pos=Exosome_node_layout)
COP9_node_layout = display_PPI_network_for_complex(ax_HCT116_v1_F, bp_HCT116_v1_df, Corum_DF, 2174, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue', node_pos=COP9_node_layout)
BCOR_node_layout = display_PPI_network_for_complex(ax_HCT116_v1_H, bp_HCT116_v1_df, Corum_DF, 1178, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue', node_pos=BCOR_node_layout)

# set titles
ax_HCT116_v1_B.set_title('Fanconi Anemia Core Complex\nHCT116 v1.0', color = 'black', fontsize = 10)
ax_HCT116_v1_D.set_title('Exosome complex\nHCT116 v1.0', color = 'black', fontsize = 10)
ax_HCT116_v1_F.set_title('COP9 signalosome complex\nHCT116 v1.0', color = 'black', fontsize = 10)
ax_HCT116_v1_H.set_title('BCOR complex\nHCT116 v1.0', color = 'black', fontsize = 10)

fig = plt.gcf()
fig.set_size_inches(14.25, 7.5)
fig.tight_layout()

# save figure as PNG
fig_out_path = '/n/shared_db/ccb/bioplex/BioPlexPy_testing/figures/network_HCT116_1.0_VS_293T_3.0_Fig1_Cell2021.png'
plt.savefig(fig_out_path, bbox_inches='tight', dpi = 300 , transparent = False)
plt.show()


# ### Example 6 - Recreate *Figure 2* from *Nature* 2017 BioPlex 2.0 paper

# **Arp2/3** complex

# In[50]:


Corum_DF[Corum_DF.ComplexID == 27]


# **TFIIH transcription factor** complex

# In[51]:


Corum_DF[Corum_DF.ComplexID == 1029]


# **Checkpoint RAD** complex

# In[52]:


Corum_DF[Corum_DF.ComplexID == 274]


# **Nau4/Tip60-HAT** complex B

# In[53]:


Corum_DF[Corum_DF.ComplexID == 787]


# In[54]:


fig = plt.figure(constrained_layout=True)
spec = gridspec.GridSpec(ncols=4, nrows=2, figure=fig) # define 2 columns since we'll have two networks
spec.update(wspace=0.01,hspace=0.01) # set the spacing between axes.

# pull CORUM complexes we're interested in
Corum_DF = getCorum('core', 'Human')

# HEK293T 1.0 - create axes objects for HEK293T v1 network
ax_293T_v1_A = fig.add_subplot(spec[0,0])
ax_293T_v1_B = fig.add_subplot(spec[0,1])
ax_293T_v1_C = fig.add_subplot(spec[0,2])
ax_293T_v1_D = fig.add_subplot(spec[0,3])

bp_293T_v1_df = getBioPlex('293T', '1.0') # load PPI data for HEK293T v1

Arp23_node_layout = display_PPI_network_for_complex(ax_293T_v1_A, bp_293T_v1_df, Corum_DF, 27, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue')
TFIIH_node_layout = display_PPI_network_for_complex(ax_293T_v1_B, bp_293T_v1_df, Corum_DF, 1029, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue')
RAD_node_layout = display_PPI_network_for_complex(ax_293T_v1_C, bp_293T_v1_df, Corum_DF, 274, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue')
NuA4_Tip60_node_layout = display_PPI_network_for_complex(ax_293T_v1_D, bp_293T_v1_df, Corum_DF, 787, 800, 1.5, node_font_size=5.5, bait_node_color='xkcd:blue', prey_node_color='xkcd:light blue', AP_MS_edge_color='xkcd:blue')

# set titles
ax_293T_v1_A.set_title('Arp2/3 protein complex\n293T v1.0', color = 'black', fontsize = 10)
ax_293T_v1_B.set_title('TFIIH transcription factor complex\n293T v1.0', color = 'black', fontsize = 10)
ax_293T_v1_C.set_title('Checkpoint Rad complex\n293T v1.0', color = 'black', fontsize = 10)
ax_293T_v1_D.set_title('Nua4/Tip60-HAT complex B\n293T v1.0', color = 'black', fontsize = 10)

# HEK293T 2.0 - create axes objects for HEK293T v2 network
ax_293T_v2_E = fig.add_subplot(spec[1,0])
ax_293T_v2_F = fig.add_subplot(spec[1,1])
ax_293T_v2_G = fig.add_subplot(spec[1,2])
ax_293T_v2_H = fig.add_subplot(spec[1,3])

bp_293T_v2_df = getBioPlex('293T', '2.0') # load PPI data for HEK293T v2

Arp23_node_layout = display_PPI_network_for_complex(ax_293T_v2_E, bp_293T_v2_df, Corum_DF, 27, 800, 1.5, node_font_size=5.5, node_pos=Arp23_node_layout)
TFIIH_node_layout = display_PPI_network_for_complex(ax_293T_v2_F, bp_293T_v2_df, Corum_DF, 1029, 800, 1.5, node_font_size=5.5, node_pos=TFIIH_node_layout)
RAD_node_layout = display_PPI_network_for_complex(ax_293T_v2_G, bp_293T_v2_df, Corum_DF, 274, 800, 1.5, node_font_size=5.5, node_pos=RAD_node_layout)
NuA4_Tip60_node_layout = display_PPI_network_for_complex(ax_293T_v2_H, bp_293T_v2_df, Corum_DF, 787, 800, 1.5, node_font_size=5.5,node_pos=NuA4_Tip60_node_layout)

# set titles
ax_293T_v2_E.set_title('Arp2/3 protein complex\n293T v2.0', color = 'black', fontsize = 10)
ax_293T_v2_F.set_title('TFIIH transcription factor complex\n293T v2.0', color = 'black', fontsize = 10)
ax_293T_v2_G.set_title('Checkpoint Rad complex\n293T v2.0', color = 'black', fontsize = 10)
ax_293T_v2_H.set_title('Nua4/Tip60-HAT complex B\n293T v2.0', color = 'black', fontsize = 10)

fig = plt.gcf()
fig.set_size_inches(14.25, 7.5)
fig.tight_layout()

# save figure as PNG
fig_out_path = '/n/shared_db/ccb/bioplex/BioPlexPy_testing/figures/network_293T_1.0_VS_293T_2.0_Fig2_Nature2017.png'
plt.savefig(fig_out_path, bbox_inches='tight', dpi = 300 , transparent = False)
plt.show()


# # [6] *get_PPI_network_edges_for_complex* - function that returns matching edges (PPI data) for a given CORUM complex in a list

# ### Description

# This function returns a dataframe of PPIs identified through AP-MS between the proteins in a specified CORUM complex.

# ### Parameters

# 1) DataFrame of PPIs : Pandas DataFrame
#  
# 2) DataFrame of CORUM complexes : Pandas DataFrame
# 
# 3) Corum Complex ID: int

# ### Returns

# Pandas DataFrame
#  - A dataframe with each row corresponding to a PPI interaction detected via AP-MS for specified complex.

# ### Example 1

# 1) Obtain the latest version of the **293T** PPI network

# In[55]:


bp_293t_df = getBioPlex('293T', '3.0')


# 2) Obtain **core** CORUM complexes for **Human**

# In[56]:


Corum_DF = getCorum('core', 'Human')


# 3) Get edges detected via AP-MS for **ING2** complex from HEK293T cell line PPI data version 3.0 (**ING2 complex** ID: 2851)

# In[57]:


ING2_PPI_edges_df = get_PPI_network_edges_for_complex(bp_293t_df, Corum_DF, 2851)
ING2_PPI_edges_df.head()


# In[58]:


ING2_PPI_edges_df.shape


# ### Example 2

# Get edges detected via AP-MS for **BCOR** complex from HEK293T cell line PPI data version 3.0 (**BCOR complex** ID: 1178)

# In[59]:


BCOR_PPI_edges_df = get_PPI_network_edges_for_complex(bp_293t_df, Corum_DF, 1178)
BCOR_PPI_edges_df.head()


# In[60]:


BCOR_PPI_edges_df.shape


# # [7] *get_prop_edges_in_complex_identfied* - function that returns the proportion of interactions between proteins in a CORUM complex detected by AP-MS

# ### Description

# This function returns the proportion of all possible PPIs identified through AP-MS between the proteins in a specified CORUM complex.

# ### Parameters

# 1) DataFrame of PPIs : Pandas DataFrame
#  
# 2) DataFrame of CORUM complexes : Pandas DataFrame
# 
# 3) Corum Complex ID: int

# ### Returns

# Float
#  - The proportion of interactions between all proteins in CORUM complex identified through AP-MS PPI data.

# ### Example 1

# 1) Obtain the latest version of the **293T** PPI network

# In[55]:


bp_293t_df = getBioPlex('293T', '3.0')


# 2) Obtain **core** CORUM complexes for **Human**

# In[56]:


Corum_DF = getCorum('core', 'Human')


# 3) Get proportion of interactions identified for **ING2** complex from HEK293T cell line PPI data version 3.0 (**ING2 complex** ID: 2851)

# In[61]:


get_prop_edges_in_complex_identfied(bp_293t_df, Corum_DF, 2851)


# ### Example 2

# 3) Get proportion of interactions identified for **Arp2/3** complex from HEK293T cell line PPI data version 3.0 (**Arp2/3 complex** ID: 27)

# In[62]:


get_prop_edges_in_complex_identfied(bp_293t_df, Corum_DF, 27)


# # [8] *permutation_test_for_CORUM_complex* - function that runs permutation test to test whether number of edges for CORUM complex PPI network is enriched for interactions

# ### Description

# This function returns a p-value after running a permutation test by 1. taking the number of proteins in the specified CORUM complex (N), 2. choosing N random proteins from the Graph generated by all of the PPI data (G), 3. calculating the number of edges in the Subgraph (S) induced by N random proteins and storing this value (E_i), 4. repeating steps 1-3 1000 times to create a null distribution, 5. calculating the number of edges between N proteins in the CORUM complex (E), 6. returning a p-value by calculating the proportion of values [E_1, E_2, ... , E_1000] that are greater than or equal to E.

# ### Parameters

# 1) DataFrame of PPIs : Pandas DataFrame
# 
# 2) Network of PPIs : NetworkX graph
#  
# 3) DataFrame of CORUM complexes : Pandas DataFrame
# 
# 4) Corum Complex ID: int

# ### Returns

# Float
#  - A p-value from a permutation test to check for enrichment of PPIs detected between proteins of CORUM complex

# ### Example 1

# 1) Obtain the latest version of the **293T** PPI network

# In[63]:


bp_293t_df = getBioPlex('293T', '3.0')


# 2) Obtain NetworkX graph representation of 293T PPI network

# In[64]:


bp_293t_G = bioplex2graph(bp_PPI_df)


# 3) Obtain **core** CORUM complexes for **Human**

# In[65]:


Corum_DF = getCorum('core', 'Human')


# 4) Calculate p-value to check for enrichment of edges in **Arp2/3** complex from HEK293T cell line PPI data version 3.0 (**Arp2/3 complex** ID: 27)

# In[66]:


permutation_test_for_CORUM_complex(bp_293t_df, bp_293t_G, Corum_DF, 27)


# ### Example 2 - iterate through all CORUM complexes and run permutation test on each one using *PPI 293T v3* data

# In[69]:


Corum_DF.head(n=2)


# In[67]:


Corum_DF.shape


# Running this for every complex takes about ~ 5 minutes to run

# In[70]:


permutation_pvals_CORUM_complex_dict = {}

count_i = 0
for CORUM_complex_ID in Corum_DF.ComplexID:
    permutation_pvals_CORUM_complex_dict[CORUM_complex_ID] = permutation_test_for_CORUM_complex(bp_293t_df, bp_293t_G, Corum_DF, CORUM_complex_ID)
    
    count_i += 1
    if count_i % 1000 == 0:
        print(count_i)
        
permutation_pvals_CORUM_complex_series = pd.Series(permutation_pvals_CORUM_complex_dict)


# In[71]:


plt.style.use('ggplot')
plt.rcParams['lines.linewidth']=1.0
plt.rcParams['axes.facecolor']='1.0'
plt.rcParams['xtick.color']='black'
plt.rcParams['axes.grid']=False
plt.rcParams['axes.edgecolor']='black'
plt.rcParams['grid.color']= '1.0'
plt.rcParams.update({'font.size': 14})

fig, ax = plt.subplots()

ax.hist(permutation_pvals_CORUM_complex_series, bins = 60, rwidth = 0.85, color = 'black')
ax.set_yscale('log')

ax.set_title('Distribution of p-vals from permutation test on every CORUM\nHuman core complex w/ 293T v3 BioPlex interaction data ', fontsize = 12, color = 'k', pad = -15)
ax.set_xlabel('Number of CORUM complexes', fontsize = 12, color = 'k', labelpad = 1)
ax.set_ylabel('p-val from permutation test' , fontsize = 12, color = 'k', labelpad = 1)

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.grid(False)
ax.tick_params(labelcolor = 'k')
ax.tick_params(axis='y', which='major', labelsize=12 , labelcolor = 'k')
ax.tick_params(axis='x', which='major', labelsize=12 , labelcolor = 'k')

fig = plt.gcf()
fig.set_size_inches(7.5, 4.5)
fig.tight_layout()

plt.show()


# In[72]:


permutation_pvals_CORUM_complex_series.sort_values(ascending = True, inplace = True)
permutation_pvals_CORUM_complex_series.head()


# In[73]:


permutation_pvals_CORUM_complex_series.tail()


# Make sure this matches the total number of complexes

# In[74]:


permutation_pvals_CORUM_complex_series.shape[0]


# Calculate the number of complexes with sig. pvals at Bonferroni cut-off

# In[75]:


sum(permutation_pvals_CORUM_complex_series < (0.05/float(permutation_pvals_CORUM_complex_series.shape[0])))


# In[ ]:




